name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - created

env:
  GO_VERSION: '1.20'
  BINARY_NAME: ssh-config

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run tests
        run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        go: [1.20]
        os: [linux, macos, windows]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}

      - name: Build for ${{ matrix.os }}/${{ matrix.arch }}
        run: |
          # Set up variables# Assuming 1.20 is available
          OUTPUT_DIR="build/${{ matrix.os }}-${{ matrix.arch }}"
          
          # Build the binary
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o "${OUTPUT_DIR}/${env.BINARY_NAME}"

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-build
          path: build/${{ matrix.os }}-${{ matrix.arch }}/

  security_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs' # scanning local file system
          input: '.' # scanning the entire repository directory
          format: 'table' # format of the results

  release:
    needs: [build, security_scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get commit messages
        id: get_commits
        run: echo "::set-output name=commits::$(git log $(git describe --tags --abbrev=0)..HEAD --oneline)"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this release:
            ${{ steps.get_commits.outputs.commits }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/octet-stream
